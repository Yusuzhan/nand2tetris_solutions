// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // test register
/*     Register(in=instruction, load=true, out=testOut,
    out[0]=test0,
    out[1]=test1,
    out[2]=test2,
    out[3]=test3,
    out[4]=test4,
    out[5]=test5,
    out[13]=test13,
    out[14]=test14,
    out[15]=test15); */

    
    // decode raw instruction
    Mux16(a=instruction, b[0..15]=false, sel=notI15, 
    out=cIns, 
    out[3]=writeM,
    out[12]=a,  // a
    out[11]=c1, // comp
    out[10]=c2,
    out[9]=c3,
    out[8]=c4,
    out[7]=c5,
    out[6]=c6,
    out[5]=d1, // dest
    out[4]=d2,
    out[3]=d3,
    out[2]=j1, // jmp
    out[1]=j2,
    out[0]=j3);

    Not(in=instruction[15], out=notI15);

    Or(a=instruction[0], b=false, out=display0);
    Or(a=instruction[1], b=false, out=display1);
    Or(a=instruction[2], b=false, out=display2);
    Or(a=instruction[3], b=false, out=display3);

    Or(a=instruction[4], b=false, out=display4);
    Or(a=instruction[5], b=false, out=display5);
    Or(a=instruction[6], b=false, out=display6);
    Or(a=instruction[7], b=false, out=display7);

    Or(a=instruction[8], b=false, out=display8);
    Or(a=instruction[9], b=false, out=display9);
    Or(a=instruction[10], b=false, out=display10);
    Or(a=instruction[11], b=false, out=display11);

    Or(a=instruction[12], b=false, out=display12);
    Or(a=instruction[13], b=false, out=display13);
    Or(a=instruction[14], b=false, out=display14);
    Or(a=instruction[15], b=false, out=display15);

    

    Mux16(a=aluO, b=instruction, sel=notI15, out=aI);
    Or(a=notI15, b=d1, out=aLoad);
    ARegister(in=aI, load=aLoad, out[0..15]=aR, out[0..14]=addressM);
    Mux16(a=aR, b=inM, sel=a, out=AM);

    DRegister(in=aluO, load=d2, out=dO);
    ALU(x=dO, y=AM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, 
    out=aluO,out=outM, zr=zrO, ng=ngO);

    And(a=ngO, b=j1, out=j1O);
    And(a=zrO, b=j2, out=j2O);

    Not(in=ngO, out=notNg);
    Not(in=zrO, out=notZr);
    And(a=notNg, b=notZr, out=jgt);
    And(a=jgt, b=j3, out=j3O);

    Or(a=j1O, b=j2O, out=j1j2O);    
    Or(a=j1j2O, b=j3O, out=jO);
    And(a=jO, b=instruction[15], out=jFinal);
    PC(in=aR, load=jFinal, inc=true, reset=reset, out[0..14]=pc);    
}