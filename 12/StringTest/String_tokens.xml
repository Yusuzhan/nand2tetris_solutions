<tokens>
	<keyword> class </keyword>
	<identifier> String </identifier>
	<symbol> { </symbol>
	<keyword> field </keyword>
	<keyword> int </keyword>
	<identifier> length </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<identifier> Array </identifier>
	<identifier> container </identifier>
	<symbol> ; </symbol>
	<keyword> constructor </keyword>
	<identifier> String </identifier>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> maxLength </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> maxLength </identifier>
	<symbol> &gt; </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> container </identifier>
	<symbol> = </symbol>
	<identifier> Array </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<identifier> maxLength </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> length </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<keyword> this </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ~ </symbol>
	<symbol> ( </symbol>
	<identifier> container </identifier>
	<symbol> = </symbol>
	<keyword> null </keyword>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> container </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> int </keyword>
	<identifier> length </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> length </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> char </keyword>
	<identifier> charAt </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> j </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> container </identifier>
	<symbol> [ </symbol>
	<identifier> j </identifier>
	<symbol> ] </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> setCharAt </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> j </identifier>
	<symbol> , </symbol>
	<keyword> char </keyword>
	<identifier> c </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> container </identifier>
	<symbol> [ </symbol>
	<identifier> j </identifier>
	<symbol> ] </symbol>
	<symbol> = </symbol>
	<identifier> c </identifier>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<identifier> String </identifier>
	<identifier> appendChar </identifier>
	<symbol> ( </symbol>
	<keyword> char </keyword>
	<identifier> c </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> container </identifier>
	<symbol> [ </symbol>
	<identifier> length </identifier>
	<symbol> ] </symbol>
	<symbol> = </symbol>
	<identifier> c </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> length </identifier>
	<symbol> = </symbol>
	<identifier> length </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<keyword> this </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> eraseLastChar </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> container </identifier>
	<symbol> [ </symbol>
	<identifier> length </identifier>
	<symbol> ] </symbol>
	<symbol> = </symbol>
	<stringConstant>  </stringConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> length </identifier>
	<symbol> = </symbol>
	<identifier> length </identifier>
	<symbol> - </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> int </keyword>
	<identifier> intValue </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> i </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> time </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> sum </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> boundry </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> boolean </keyword>
	<identifier> negtive </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> time </identifier>
	<symbol> = </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<identifier> length </identifier>
	<symbol> - </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> container </identifier>
	<symbol> [ </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ] </symbol>
	<symbol> = </symbol>
	<integerConstant> 45 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> negtive </identifier>
	<symbol> = </symbol>
	<keyword> true </keyword>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> boundry </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> negtive </identifier>
	<symbol> = </symbol>
	<keyword> false </keyword>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> boundry </identifier>
	<symbol> = </symbol>
	<symbol> - </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> &gt; </symbol>
	<identifier> boundry </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> sum </identifier>
	<symbol> = </symbol>
	<identifier> sum </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> container </identifier>
	<symbol> [ </symbol>
	<identifier> i </identifier>
	<symbol> ] </symbol>
	<symbol> - </symbol>
	<integerConstant> 48 </integerConstant>
	<symbol> ) </symbol>
	<symbol> * </symbol>
	<identifier> time </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> time </identifier>
	<symbol> = </symbol>
	<identifier> time </identifier>
	<symbol> * </symbol>
	<integerConstant> 10 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<identifier> i </identifier>
	<symbol> - </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> negtive </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<symbol> - </symbol>
	<identifier> sum </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> sum </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<identifier> String </identifier>
	<identifier> int2String </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> v </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> char </keyword>
	<identifier> lastDigit </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> lastDigit </identifier>
	<symbol> = </symbol>
	<symbol> ( </symbol>
	<identifier> v </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> v </identifier>
	<symbol> / </symbol>
	<integerConstant> 10 </integerConstant>
	<symbol> * </symbol>
	<integerConstant> 10 </integerConstant>
	<symbol> ) </symbol>
	<symbol> + </symbol>
	<integerConstant> 48 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> v </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 10 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> appendChar </identifier>
	<symbol> ( </symbol>
	<identifier> lastDigit </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<identifier> lastDigit </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> int2String </identifier>
	<symbol> ( </symbol>
	<identifier> v </identifier>
	<symbol> / </symbol>
	<integerConstant> 10 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> appendChar </identifier>
	<symbol> ( </symbol>
	<identifier> lastDigit </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<keyword> this </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> setInt </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> v </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> char </keyword>
	<identifier> negtive </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> length </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> v </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> v </identifier>
	<symbol> = </symbol>
	<symbol> - </symbol>
	<identifier> v </identifier>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> appendChar </identifier>
	<symbol> ( </symbol>
	<integerConstant> 45 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> int2String </identifier>
	<symbol> ( </symbol>
	<identifier> v </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<keyword> char </keyword>
	<identifier> backSpace </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<integerConstant> 129 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<keyword> char </keyword>
	<identifier> doubleQuote </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<integerConstant> 34 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<keyword> char </keyword>
	<identifier> newLine </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<integerConstant> 128 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
</tokens>