<tokens>
	<keyword> class </keyword>
	<identifier> Memory </identifier>
	<symbol> { </symbol>
	<keyword> static </keyword>
	<keyword> int </keyword>
	<identifier> freeList </identifier>
	<symbol> ; </symbol>
	<keyword> static </keyword>
	<identifier> Array </identifier>
	<identifier> memory </identifier>
	<symbol> ; </symbol>
	<keyword> function </keyword>
	<keyword> void </keyword>
	<identifier> init </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> freeList </identifier>
	<symbol> = </symbol>
	<integerConstant> 2048 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> memory </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> memory </identifier>
	<symbol> [ </symbol>
	<integerConstant> 2048 </integerConstant>
	<symbol> ] </symbol>
	<symbol> = </symbol>
	<integerConstant> 14336 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> memory </identifier>
	<symbol> [ </symbol>
	<integerConstant> 2049 </integerConstant>
	<symbol> ] </symbol>
	<symbol> = </symbol>
	<keyword> null </keyword>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<keyword> int </keyword>
	<identifier> peek </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> address </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> memory </identifier>
	<symbol> [ </symbol>
	<identifier> address </identifier>
	<symbol> ] </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<keyword> void </keyword>
	<identifier> poke </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> address </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> value </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> memory </identifier>
	<symbol> [ </symbol>
	<identifier> address </identifier>
	<symbol> ] </symbol>
	<symbol> = </symbol>
	<identifier> value </identifier>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<identifier> Array </identifier>
	<identifier> alloc </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> size </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> pointer </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> pointer </identifier>
	<symbol> = </symbol>
	<identifier> freeList </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> freeList </identifier>
	<symbol> = </symbol>
	<identifier> freeList </identifier>
	<symbol> + </symbol>
	<identifier> size </identifier>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<identifier> pointer </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<keyword> void </keyword>
	<identifier> deAlloc </identifier>
	<symbol> ( </symbol>
	<identifier> Array </identifier>
	<identifier> o </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
</tokens>